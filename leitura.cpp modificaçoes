#include <iostream>
#include <fstream>
#include <string>
#include<algorithm>
#include"leitura.h"
#include<list>
#include<set>
using namespace std;


//converte os caracteres de uma string que s√£o maiusculos para minusculo
void Leitura::Tudominusculo(string&word){
    for(unsigned int i=0;i<word.size();i++){
        word[i]=tolower(word[i]);

    }
    TiraCaracter(word);
}
//Remove da string os caracteres .?/,;][-)(:
void Leitura::TiraCaracter(string&word){
    for(unsigned int i=0;i<word.size();i++){
        if(word[i]=='.'||word[i]=='?'||word[i]=='/'||word[i]==';'||word[i]==']'||word[i]=='['||word[i]=='-'||word[i]==')'||word[i]=='('||word[i]==','||word[i]==':'||word[i]=='!'){
            word.erase(word.begin()+i);
            i=i-1;
        }
    }
}

//Le os arquivos
void Leitura::ReadFile(int qtdArquivos){


    for(int i=0;i<qtdArquivos;i++){
        cout<<"Digite o nome do arquivo no formato file.txt"<<endl;
        string auxiliar;
        cin>>auxiliar;
        nomeArquivo.push_back(auxiliar);
    }

        list<string> palavrasDoc;
        map<string, set<string> > palavras;
        string wordAux;
        unsigned int k;
        set<string> nomesArquivos;


    for(int i=0;i<qtdArquivos;i++){
        arquivo_.open(nomeArquivo[i].c_str(),std::ios::in);

      //insere o nome do arquivo no set para o map
      nomesArquivos.insert(nomeArquivo[i]);

        while(!arquivo_.eof())
            {
            arquivo_>>word;
            Tudominusculo(word);
            //*****para testar a palavra depois de tirar carct e converter
            cout<<word<<endl;
            }


    //separa cada palavra e armazena o documento no set do map
        for(unsigned int j = 0; j<word.size(); j++)
        {
            if(word[j] == ' ' || word[j] == '\0')
            {
                k = 0;
                palavrasDoc.push_back(wordAux);
                palavras[palavrasDoc.back()] = nomesArquivos;

            } else()
                {
                    k = 0;
                    wordAux[k] = word[j];
                    k++;
                }
        }
    }
}
Leitura::Leitura(int qtdArquivos){
    ReadFile(qtdArquivos);

}
